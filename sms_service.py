import requests
import logging
from twilio.rest import Client
from config import Config

logger = logging.getLogger(__name__)

class SMSService:
    def __init__(self):
        self.config = Config()
        self.health_authority_number = self.config.HEALTH_AUTHORITY_NUMBER
        
    def send_alert(self, user_data, diseases, risk_level):
        """
        Send SMS alert to health authorities about potential water-borne disease
        """
        try:
            # Create the alert message
            message = self._create_alert_message(user_data, diseases, risk_level)
            
            # Choose SMS provider based on configuration
            if self.config.SMS_PROVIDER == 'twilio':
                return self._send_via_twilio(message)
            elif self.config.SMS_PROVIDER == 'fast2sms':
                return self._send_via_fast2sms(message)
            else:
                logger.error(f"Unsupported SMS provider: {self.config.SMS_PROVIDER}")
                return False
                
        except Exception as e:
            logger.error(f"Error sending SMS alert: {str(e)}")
            return False
    
    def _create_alert_message(self, user_data, diseases, risk_level):
        """Create the SMS message content"""
        disease_names = ", ".join([d['name'] for d in diseases])
        
        message = f"""ðŸš¨ HEALTH ALERT - {risk_level.upper()} RISK ðŸš¨

Potential Water-Borne Disease Detected:
- Patient: {user_data['name']}
- Age: {user_data['age']}
- Village: {user_data['village']}
- Contact: {user_data['mobile']}

Detected Conditions: {disease_names}
Risk Level: {risk_level.upper()}

Action Required: Please contact for immediate assessment.

Generated by HealthShield System"""
        
        return message
    
    def _send_via_twilio(self, message):
        """Send SMS using Twilio API"""
        try:
            if not all([self.config.TWILIO_ACCOUNT_SID, 
                       self.config.TWILIO_AUTH_TOKEN, 
                       self.config.TWILIO_PHONE_NUMBER]):
                logger.error("Twilio credentials not configured")
                return False
            
            client = Client(self.config.TWILIO_ACCOUNT_SID, self.config.TWILIO_AUTH_TOKEN)
            
            message = client.messages.create(
                body=message,
                from_=self.config.TWILIO_PHONE_NUMBER,
                to=self.health_authority_number
            )
            
            logger.info(f"SMS sent via Twilio. SID: {message.sid}")
            return True
            
        except Exception as e:
            logger.error(f"Twilio SMS sending failed: {str(e)}")
            return False
    
    def _send_via_fast2sms(self, message):
        """Send SMS using Fast2SMS API (Indian provider)"""
        try:
            if not self.config.FAST2SMS_API_KEY:
                logger.error("Fast2SMS API key not configured")
                return False
            
            url = "https://www.fast2sms.com/dev/bulkV2"
            
            payload = {
                "message": message,
                "language": "english",
                "route": "q",
                "numbers": self.health_authority_number
            }
            
            headers = {
                'authorization': self.config.FAST2SMS_API_KEY,
                'Content-Type': "application/json"
            }
            
            response = requests.post(url, json=payload, headers=headers)
            response_data = response.json()
            
            if response_data.get('return'):
                logger.info(f"SMS sent via Fast2SMS. Response: {response_data}")
                return True
            else:
                logger.error(f"Fast2SMS API error: {response_data}")
                return False
                
        except Exception as e:
            logger.error(f"Fast2SMS SMS sending failed: {str(e)}")
            return False

# Alternative: Simple HTTP SMS Gateway (for testing)
class SimpleSMSGateway:
    def send_alert(self, user_data, diseases, risk_level):
        """Simple SMS gateway for testing (logs instead of actually sending)"""
        message = f"""TEST SMS ALERT - {risk_level.upper()} RISK
Patient: {user_data['name']} | Village: {user_data['village']}
Diseases: {', '.join([d['name'] for d in diseases])}"""
        
        print(f"SMS would be sent to {Config.HEALTH_AUTHORITY_NUMBER}:")
        print(message)
        print("-" * 50)
        
        return True